import path from "path";
import fs from "fs-extra";
import { writeStoryTestsFile } from "./write-tests-file";
import { buildStoryTestFiles } from "./index";
import { StorybookStoryExtended } from "../get-stories";

jest.mock("os", () => ({ tmpdir: jest.fn().mockReturnValue("/tmpdir") }));
jest.mock("fs-extra");
jest.mock("./write-tests-file");

describe("storybook/story-to-test", () => {
    it("should save tests in tmpdir", async () => {
        const story = { importPath: "./story/path/story.js" } as StorybookStoryExtended;

        const storyTestFiles = await buildStoryTestFiles([story], {
            autoScreenshots: true,
            autoscreenshotSelector: "foobar",
            autoScreenshotStorybookGlobals: {},
        });

        expect(storyTestFiles).toEqual(["/tmpdir/testplane-storybook-autogenerated/story/path/story.js.testplane.js"]);
    });

    it("should empty tests dir before writing tests", async () => {
        await buildStoryTestFiles([], {
            autoScreenshots: true,
            autoscreenshotSelector: "foobar",
            autoScreenshotStorybookGlobals: {},
        });

        expect(fs.emptyDir).toBeCalled();
    });

    it("should write test files for given stories", async () => {
        jest.spyOn(path, "resolve").mockImplementation((_, storyPath) => storyPath);
        const storyFirst = { importPath: "./story/path/story-first.js" } as StorybookStoryExtended;
        const storySecond = { importPath: "./story/path/story-second.js" } as StorybookStoryExtended;
        const opts = {
            autoScreenshots: true,
            autoscreenshotSelector: "foobar",
            autoScreenshotStorybookGlobals: { foo: { bar: "baz" } },
        };

        const storyTestFiles = await buildStoryTestFiles([storyFirst, storySecond], opts);

        expect(writeStoryTestsFile).toBeCalledWith({
            testFile: "./story/path/story-first.js.testplane.js",
            stories: [storyFirst],
            opts,
        });

        expect(writeStoryTestsFile).toBeCalledWith({
            testFile: "./story/path/story-second.js.testplane.js",
            stories: [storySecond],
            opts,
        });

        expect(storyTestFiles).toEqual([
            "./story/path/story-first.js.testplane.js",
            "./story/path/story-second.js.testplane.js",
        ]);
    });
});
